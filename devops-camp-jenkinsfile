pipeline {
	agent {
		label 'jenkins-agent'
	}
	environment {
		PIPELINE_HASH = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
		HARBOR_REGISTRY = 'harbor.dev.afsmtddso.com'
		HARBOR_PROJECT = '<first name initial + last name>-devsecops' 
		APP_IMAGE_NAME = 'app'
		DB_IMAGE_NAME = 'db'
	}
	stages {
		stage('Application repository') {
			steps {
				echo "Cloning application repository"
				sh 'git clone https://github.com/pattynantume/devops-camp-pipeline.git'
				dir('afs-labs-student') {
					script{
						env.APP_HASH = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
					}	
				}		
			}
		}
		stage('Application docker build') {
			steps {
				echo "Building application image"
				post {
					always {
						echo "Clean local $APP_IMAGE_NAME image"
						script {
							try {
								sh 'docker rmi $APP_IMAGE_NAME-$APP_HASH:latest'
								sh 'docker rmi $HARBOR_REGISTRY/$HARBOR_PROJECT/$APP_IMAGE_NAME:$APP_HASH-$PIPELINE_HASH'
							} catch (err) {
								echo err.getMessage()
							}
						}
					}
				}
			}
		}
		stage('Database docker build') {
			steps {
			// modify to build db image and push to harbor
				withCredentials([usernameColonPassword(credentialsId: 'pnantume-harbor-auth, variable: 'HARBOR-AUTH')]) {
				script {
					docker.build('$DB_IMAGE_NAME-$APP_HASH', '-f ./db/Dockerfile ./afs-labs-student')
					docker.withRegistry('https://$HARBOR_REGISTRY', 'student20') {
						sh 'docker tag $DB_IMAGE_NAME-$APP_HASH $HARBOR_REGISTRY/$HARBOR_PROJECT/$DB_IMAGE_NAME:$APP_HASH-$PIPELINE_HASH'
						sh 'docker push $HARBOR_REGISTRY/$HARBOR_PROJECT/$DB_IMAGE_NAME:$APP_HASH-$PIPELINE_HASH'
					}	
					}	
				}	
			}	
			post {
			// modify to clean local db image build
				always {
					echo "Clean local $APP_IMAGE_NAME image"
					script {
						try {
							sh 'docker rmi $DB_IMAGE_NAME-$APP_HASH:latest'
							sh 'docker rmi $HARBOR_REGISTRY/$HARBOR_PROJECT/$DB_IMAGE_NAME:$APP_HASH-$PIPELINE_HASH'
						} catch (err) {
							echo err.getMessage()
						}
					}
				}
			}
		}
		stage('Test'){
			steps {
				echo "Testing stage"
			}
		}
		stage('Deploy') {
			steps {
				echo "Deployment stage"
			}
		}
	}
	post {
		cleanup {
			echo "Clean workspace"
			sh 'docker system prune -f'
			sh 'rm -rf .git ./*'
		}
	}
}
